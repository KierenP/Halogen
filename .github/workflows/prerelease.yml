name: Prerelease

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Build and Verify
    strategy:
      matrix:
        arch: [ legacy, sse4, avx, avx2, avx2-pext, avx512, avx512vnni ]
        os: 
          - { platform: ubuntu-latest, name: ubuntu }
          - { platform: windows-latest, name: windows }
        include:
          - os.platform: windows-latest
            extension: .exe

    runs-on: ${{ matrix.os.platform }}

    steps:
    - uses: actions/checkout@v4.1.1
      # we need to make sure we checkout the head commit, rather than the merge commit the github actions pipeline generates for us.
      # This ensures we can extract the expected bench from the commit message.
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - if: matrix.os.platform == 'ubuntu-latest'
      name: Extract Version Identifier (Linux)
      run: |
        VERSION=$(grep 'constexpr std::string_view version' ${{ github.workspace }}/src/main.cpp | cut -d'"' -f2)
        echo "VERSION=${VERSION}" >> $GITHUB_ENV

    - if: matrix.os.platform == 'windows-latest'
      name: Extract Version Identifier (Windows)
      shell: powershell
      run: |
        $VERSION = (Get-Content -Path ${{ github.workspace }}/src/main.cpp | Select-String -Pattern 'constexpr std::string_view version' -SimpleMatch).ToString().Split('"')[1]
        echo "VERSION=${VERSION}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    # latest available Clang versions on each platform
    - if: matrix.os.platform == 'ubuntu-latest'
      name: Install Clang 20 (Ubuntu)
      run: |
        wget https://apt.llvm.org/llvm.sh
        sudo chmod +x llvm.sh
        sudo ./llvm.sh 20
        sudo rm -rf llvm.sh

    - if: matrix.os.platform == 'windows-latest'
      name: Install Clang 20 (Windows)
      run: |
        choco install llvm --version 20.1.7 -y

    - if: matrix.os.platform == 'ubuntu-latest'
      name: Set CC and CXX for Linux
      run: |
        echo "CC=clang-20" >> $GITHUB_ENV
        echo "CXX=clang++-20" >> $GITHUB_ENV

    - if: matrix.os.platform == 'windows-latest'
      name: Set CC and CXX for Windows
      shell: powershell
      run: |
        echo "CC=clang" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "CXX=clang++" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Help_debug_clang
      working-directory: src
      run: which clang++

    - name: Build
      working-directory: src
      run: make ${{ matrix.arch }} EXE=../build/Halogen${{ matrix.extension }} -j

    - name: Rename Binary
      run: |
        mv ${{ github.workspace }}/build/Halogen${{ matrix.extension }} ${{ github.workspace }}/Halogen-${{ env.VERSION }}-${{ matrix.os.name }}-${{ matrix.arch }}${{ matrix.extension }}

    # only avx2 and below supported on github runners
    - if: matrix.os.platform == 'ubuntu-latest' && matrix.arch != 'avx512vnni' && matrix.arch != 'avx512'
      name: Verify (Linux)
      run: |
        commit_bench=$(git show --summary | grep -o "Bench: [0-9]*" | awk '{ print $NF }')
        actual_bench=$(${{ github.workspace }}/Halogen-${{ env.VERSION }}-${{ matrix.os.name }}-${{ matrix.arch }}${{ matrix.extension }} bench | tail -1 | grep -o "^[0-9]*")
        if [[ "$actual_bench" != "$commit_bench" ]]; then
          echo "Incorrect bench, got '$actual_bench' expected '$commit_bench'" && exit 1
        else
          echo "Got correct bench $actual_bench"
        fi

    - if: matrix.os.platform == 'windows-latest' && matrix.arch != 'avx512vnni' && matrix.arch != 'avx512'
      name: Verify (Windows)
      shell: pwsh
      run: |
        cd bin
        $commit_bench_line = git show --summary | Select-String -Pattern 'Bench: \d+'
        $commit_bench = [regex]::Match($commit_bench_line.Line, 'Bench: (\d+)').Groups[1].Value
        $actual_output = & "${{ github.workspace }}\Halogen-${{ env.VERSION }}-${{ matrix.os.name }}-${{ matrix.arch }}${{ matrix.extension }}" bench
        $actual_bench = $actual_output[-1] -replace '^\D*(\d+).*$', '$1'

        if ($actual_bench -ne $commit_bench) {
          Write-Error "Incorrect bench, got '$actual_bench' expected '$commit_bench'"
          exit 1
        } else {
          Write-Host "Got correct bench $actual_bench"
        }

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: Halogen-${{ env.VERSION }}-${{ matrix.os.name }}-${{ matrix.arch }}${{ matrix.extension }}
        path: ${{ github.workspace }}/Halogen-${{ env.VERSION }}-${{ matrix.os.name }}-${{ matrix.arch }}${{ matrix.extension }}

  release:
    name: Create Prerelease and Upload Release Assets
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Extract Version Identifier
      run: |
        VERSION=$(grep 'constexpr std::string_view version' ${{ github.workspace }}/src/main.cpp | cut -d'"' -f2)
        echo "VERSION=${VERSION}" >> $GITHUB_ENV

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ${{ github.workspace }}/artifacts

    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "${{ env.VERSION }}"
        files: ${{ github.workspace }}/artifacts/**/*
